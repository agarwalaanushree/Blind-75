Brute Force: TC- O(n^3)

class Solution {
public:
bool isPalindrome(string s)
{
    string temp;
    temp=s;
    reverse(temp.begin(),temp.end());
    if(s==temp)
    return true;
    else
    return false;
}
    int countSubstrings(string s) {
        int n=s.size();
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            string s1="";
            for(int j=i;j<n;j++)
            {
                s1+=s[j];
                if(isPalindrome(s1))
                cnt++;
            }
        }

        return cnt;
    }
};


Optimized: TC- O(n^2)

class Solution {
public:
int countPalindrome(string s,int l,int r)
{
    int cnt=0;
    while(l>=0 && r<s.size() && s[l--]==s[r++]){
        cnt++;
    }

    return cnt;
}
    int countSubstrings(string s) {
        int n=s.size();
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            int ev=countPalindrome(s,i,i+1);
            int odd=countPalindrome(s,i-1,i+1);
            cnt+=ev+odd+1;
        }

        return cnt;
    }
};
